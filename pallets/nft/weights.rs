
//! Autogenerated weights for `pallet_nft`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-04-20, STEPS: `20`, REPEAT: 10, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/node-template
// benchmark
// --chain
// dev
// --execution
// wasm
// --wasm-execution
// compiled
// --pallet
// pallet_nft
// --extrinsic
// *
// --steps
// 20
// --repeat
// 10
// --json
// --output
// ./pallets/nft/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for `pallet_nft`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_nft::WeightInfo for WeightInfo<T> {
	// Storage: RandomnessCollectiveFlip RandomMaterial (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	// Storage: PalletNFT TokenById (r:1 w:1)
	fn mint_nft(_s: u32, ) -> Weight {
		(55_109_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: RandomnessCollectiveFlip RandomMaterial (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	// Storage: PalletNFT CollectionById (r:1 w:1)
	fn create_collection(_s: u32, ) -> Weight {
		(48_242_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: PalletNFT CollectionById (r:1 w:1)
	// Storage: PalletNFT TokenById (r:1 w:0)
	fn destroy_collection(s: u32, ) -> Weight {
		(29_248_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((2_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: PalletNFT TokenById (r:1 w:1)
	fn edit_nft(s: u32, ) -> Weight {
		(46_463_000 as Weight)
			// Standard Error: 6_000
			.saturating_add((12_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: PalletNFT CollectionById (r:1 w:1)
	fn edit_collection(_s: u32, ) -> Weight {
		(42_804_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: PalletNFT TokenById (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	fn buy_nft(_s: u32, ) -> Weight {
		(60_150_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: PalletNFT TokenById (r:1 w:1)
	// Storage: PalletNFT OrderByTokenId (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	fn pay_installment(_s: u32, ) -> Weight {
		(64_049_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
	// Storage: PalletNFT TokenById (r:1 w:1)
	fn set_sale_nft(_s: u32, ) -> Weight {
		(25_515_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: PalletNFT TokenById (r:1 w:1)
	fn set_nft_price(_s: u32, ) -> Weight {
		(27_620_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: PalletNFT TokenById (r:1 w:1)
	fn burn_nft(_s: u32, ) -> Weight {
		(24_759_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
}
